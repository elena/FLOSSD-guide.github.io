# -*- coding: utf-8 -*-
how-many
<h3 class="overlay">3.3M People on ohloh</h3>
<h3 class="overlay">&#8532;M projects</h3>
<h3 class="overlay">18.5M programmers</h3>
<p class="overlay">
  <div>11M professionals<br>7.5M "hobbiests"</div>
</p>
IDC, 2104 survey

<!-- %:: autonomy, mastery and purpose -->
<!-- $ not money -->
<!-- # What we really want (it's not money) -->
<!--   >> back to the idea of "# Fun" -->
<!--   - Actually can't stop us. -->
<!--   >> autonomy, mastery and purpose -->

<!--   >> # Skilling up/being the "Best" -->
<!--   >> - not "during the day" -->
<!--   >> - exposure -->
<!--   >> - omgz the best -->

%brene [?]
Connection
<p>Pretty much anything any one ever does is for this.
- Even psychopaths (just warped, what they connect with is mental)</p>
<h3 class="overlay">"Ego"/"recognition"</h3>
>> monkeys in shoes

<!-- %:: Best learning tool eva -->
<!-- # Best CV eva -->
<!--   >> I imagine everyone here know this: -->
<!--   >> in these economic times we're a sector that's not suffering -->

<!-- %aaron-swartz -->
<!-- # Ethics -->
<!--  - Aaron-Swartz-factor -->
<!--  - altruism, values, "make the world a better place -->
<!--  - democracy, meritocracy -->
<!--  - not cool to talk about in old-skool projects, -->
<!--    >> but I think (but unvalidated) it's cool for us -->

<!-- %:: Where do I find projects? -->
<!-- % map -->
<!--  >> - this question has always bothered me -->
<!--  >> - cheesy kids movie: "it's inside you" -->

"Meeting a personal need"
<p>- what's *your* <strong>interest</strong><br>
- what's *your* <strong>strength</strong><br>
- what <strong>skill</strong> do *you* currently want to work on<br>
- what <strong>problem</strong> to *you* want to solve<br>
- what do you do in your <strong>spare time</strong><br>
- weird form of teamwork</p>
>> AKA "Scratching your own itch"

%#Think like a Contributor
<h2>Learn to Look</h2>
<p>Have a good <strong>internal sense</strong> of when you're using
Free Software
(which I trust everyone here does ...)

Think like a Contributor
<h2>Learn to Look</h2>
<p>Rather than being a passive user, make an effort:</p>
<p>- Replicate bugs<br>
   - Read and understand documentation (for coherence)<br>
   - Details, details, details (spelling, crxhtml-mouft)</p>
all these things take *effort*, use your brain
<!-- # Change your brain: learn to look for ways you can help -->
<!-- - open your brain -->
<!-- - use your brains, thinking is hard -->

Projects that help: Open Hatch, github/explore, ohloh
>> another breakdown in the traditional message.

!shout
>> Old version of this talk.
>> fact which surfaced from COMP8440
# All projects are different.

<!-- //KINDS of PROJECTS -->
%# Kinds of projects
<p>How <strong>old</strong> is the project?</p>
<p>Where in its <strong>lifecycle</strong> is it?<br>
~ New project<br>
~ Active progression<br>
~ Mature, maintenance phase<br>
~ Dead</p>

%cathedral-bizarre
%# Kinds of projects
$*UC Davies
<div class="halfR">
  <p>Cathedral v. Bizarre</p>
  <p>Recent research*:<br>
  ~ Foundation<br>
  ~ Community driven<br>
  ~ Monarchy</p>
</div>
>> Cannot independently derive this stuff: research, listen

%# Kinds of projects
<p>How <strong>many people</strong> are involved?</p>
<p>What clear <strong>roles</strong> are defined?<br>
~ BDFL/s<br>
~ Release Manager</p>
>> Assume everyone is crazy-busy all the time (unless they clearly say otherwise)

%pep8
##We are python
<h2>Me says: <br>2 types of project</h2>
<!-- >> but we are python, Honestly all our projects are pretty similar. -->

# Diametrically opposite experiences
# Rule still stands have a basic idea of the project before diving in

%GRAPH (@mako)
$Average 1
 >> I suspected this but then had it confirmed by
    @mako (friend of Aaron Swartz and ubuntu co-founder)

<!-- %# 2 Kinds of projects -->
<!-- - me says: 2 types -->
%#-
<h3>very very <b>tiny number</b> famous project need <br> <strong>very highly skill, specific help</strong></h3>.
<h3>vast <b>majority</b> projects need <br> <strong>all the help in the world</strong></h3>.

//PROJECTS and YOU
<!-- //DOMAIN KNOWLEDGE -->
<!-- %topo1 -->
<!-- $ what you know -->
<!-- # Domain Knowledge -->
<!-- - mountaineers, walkers, it's just different -->

<!-- %topo2 -->
<!-- $ what skills you have -->
<!-- %topo3 -->
<!-- $ what some random project owner's skills are -->

#START SMALL
> be thorough

%climbers-climbers
<h2 class="overlay">BE A PRO or START SMALL</h2>
!! $ probably don't be learning craft on high-profile project
$ maybe learn on low-profile project (depending on owner)
- Sporting team analogy
- "going to contribute to Django today" srsly.
- don't learn here, learn "there"

%# expedition
Serious (1% projects) have serious, dedicated, committed, professional people

# whose time is precious
- committers are a very limited resource
- signing up to big-time project, *have different expectations*

%# core
That's why concept of "core" exists
- ecosystem around
- build up ranks
- make plugins

%#Things you can do
Constructive Procrastination
 > students

<p>Punch your weight<br>
Play your strength<br>
(For your first commit -- confident, easy: dinner parties/marathons)<br>
Realistic expectations</p>
You might waltz straight in.
- it's like farting

Engage socially
push-pull social networking github, socially-engaged stay longer
things are so easy on github (cycle is faster than ever)
everyone changes
>> don't be an ass-hat

%#Things you can do as <strong>coder</strong>
<p>Code Review (learning)<br>
  HTML<br>
  Bug triage and replication<br>
  Users list (fielding questions)</p>

%#Things you can do as a <strong>coder</strong>
<p>Spend most your time:
<br>documenting
<br>maintaining
<br>fixing
<br>testing
<br><strong>reading</strong> code</p>
>>It's not all about the uber-ego commits

%#Things you can do as a <strong>coder</strong>
<h3>(Not 1%) Projects are really Flexible</h3>
- (Not top 1%), but rest FOSS is really flexible.
<p>Young projects can turn on a dime for your idea.</p>
<p>Envisioning and implementing <strong>all the details</strong><br>
  is expensive for new projects.</p>
>>Maybe it *is* about the uber-ego commits

%# Stable/Working > your ego (sorry.)
<p>Expect to get <strong>"feedback"</strong> (ie rejection)</p>
>> free ⊄ useful (!≟)


%#Non-coders
# 50%/50%
- MSF, EWB, Pro Bono (band, sporting team)


%#Things you can do as a <strong>non-coder</strong>
<p>Code Review (learning)<br>
Every project needs: designers, content makers, writers

# The world needs more technical lawyers!
- sincerely Eben Moglin, Karen Sandler

# The world needs more designers
- fight the "programming since 8" phenomenon


%#Finding projects
<h3>YOU ARE AT A CONFERENCE NOW!</h3>
<p>- sprints</p>
<p>Tools/projects <strong>you use</strong></p>
<p>Projects <strong>people you know</strong> are working on</p>
<p>Projects within your <strong>"domain"</strong> (hockey, GIS, pigeon-racing)</p>
>> "Learn to look" redux: change your brain to looking

>> **
# ------------- #####
>> **

%-
If you are not a coder
(2014 advice)
# LEARN GITHUB

%#What is git?
<h2>VERSION CONTROL SYSTEM (VCS)</h2>
>>
# VCS
#DVCS wars

# 3rd great era, it may change again
- sourceforge and github
- bear in mind git is a bit arse to use still, 2st great DVCS
- article so recently as 2007! lauding sourceforge

# Start small
- take nothing else away
- Linus Stallman von Neuman
- drive by shootings, gotta know you, trust you

# Find out how/who communicate
# Find out how to commit

- $ git clone
- commit, push, pull

 >> in 2014 this is the advice,
 this may change but we're at a highwater mark for github right now

>> conceptually it goes something like this:

- #1 reach out
|notice itch
|find code
|eyeball community

- #2 do your thing
|fork
|clone
|grep (or code, etc)
|commit, push (to your version)

- #3 send back
|pull request
|(comment/email)


#START SMALL
> be thorough

%bike-nuclear
%"Parkinson's Law of Triviality"
<blockquote>1957 argument that organizations give disproportionate weight to trivial issues</blockquote>
<p>No domain experience/knowledge required</p>
<p>Only invested people allowed to bikeshed</p>
- beware of projects with a very well discussed logo and no code
>> It's easy to get sucked in to non-technically-threatening discussions, fight this compulsion.<br>
(unless your advice is specifically ask for!)


"STYLE"
Learn the “style” of the existing project. Phrasing, structure, etc.
There will probably be rules. Follow them. eg: PEP8
If in doubt: copy
Don’t make up a new style, you’ll look like a fool -- ASK!
<!--  - do what they do, follow procedure -->



Fun, compelling, interesting and challenging and we want to do it anyway.

Fun, chaotic, anarchic, opinionated >> FUN
Serendipidy: don't know where FLOSS will go
Zero marginal cost.
If we're clever and we work together we can attain what is probably the highest attainment in human history. Freedom.
Could be hyperbole but they say the "c ..."

Communicate, Communicate, Communicate
